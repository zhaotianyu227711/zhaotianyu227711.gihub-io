! function(root, factory) {
	"use strict";
	"function" == typeof define && define.amd ? define(["seriously"], factory) : "object" == typeof exports ? factory(require("seriously")) : (root.Seriously || (root.Seriously = {
		plugin: function(name, opt) {
			this[name] = opt
		}
	}), factory(root.Seriously))
}(window, function(Seriously) {
	"use strict";
	Seriously.plugin("chroma", {
		shader: function(inputs, shaderSource) {
			return shaderSource.vertex = ["precision mediump float;", "attribute vec4 position;", "attribute vec2 texCoord;", "uniform vec2 resolution;", "uniform mat4 transform;", "varying vec2 vTexCoord;", "uniform vec4 screen;", "uniform float balance;", "varying float screenSat;", "varying vec3 screenPrimary;", "void main(void) {", "\tfloat fmin = min(min(screen.r, screen.g), screen.b);", "\tfloat fmax = max(max(screen.r, screen.g), screen.b);", "\tfloat secondaryComponents;", "\tscreenPrimary = step(fmax, screen.rgb);", "\tsecondaryComponents = dot(1.0 - screenPrimary, screen.rgb);", "\tscreenSat = fmax - mix(secondaryComponents - fmin, secondaryComponents / 2.0, balance);", "\tvec4 screenPosition = vec4(position.xy * resolution / 2.0, position.z, position.w);", "\tscreenPosition = transform * screenPosition;", "\tgl_Position = screenPosition;", "\tgl_Position.xy = screenPosition.xy * 2.0 / resolution;", "\tgl_Position.z = screenPosition.z * 2.0 / (resolution.x / resolution.y);", "\tvTexCoord = texCoord;", "}"].join("\n"), shaderSource.fragment = [this.inputs.mask ? "#define MASK" : "", "precision mediump float;", "varying vec2 vTexCoord;", "uniform sampler2D source;", "uniform vec4 screen;", "uniform float screenWeight;", "uniform float balance;", "uniform float clipBlack;", "uniform float clipWhite;", "uniform bool mask;", "varying float screenSat;", "varying vec3 screenPrimary;", "void main(void) {", "\tfloat pixelSat, secondaryComponents;", "\tvec4 sourcePixel = texture2D(source, vTexCoord);", "\tfloat fmin = min(min(sourcePixel.r, sourcePixel.g), sourcePixel.b);", "\tfloat fmax = max(max(sourcePixel.r, sourcePixel.g), sourcePixel.b);", "\tvec3 pixelPrimary = step(fmax, sourcePixel.rgb);", "\tsecondaryComponents = dot(1.0 - pixelPrimary, sourcePixel.rgb);", "\tpixelSat = fmax - mix(secondaryComponents - fmin, secondaryComponents / 2.0, balance);", "\tfloat diffPrimary = dot(abs(pixelPrimary - screenPrimary), vec3(1.0));", "\tfloat solid = step(1.0, step(pixelSat, 0.1) + step(fmax, 0.1) + diffPrimary);", "\tfloat alpha = max(0.0, 1.0 - pixelSat / screenSat);", "\talpha = smoothstep(clipBlack, clipWhite, alpha);", "\tvec4 semiTransparentPixel = vec4((sourcePixel.rgb - (1.0 - alpha) * screen.rgb * screenWeight) / max(0.00001, alpha), alpha);", "\tvec4 pixel = mix(semiTransparentPixel, sourcePixel, solid);", "#ifdef MASK", "\tgl_FragColor = vec4(vec3(pixel.a), 1.0);", "#else", "\tgl_FragColor = pixel;", "#endif", "}"].join("\n"), shaderSource
		},
		inPlace: !0,
		inputs: {
			source: {
				type: "image",
				uniform: "source"
			},
			screen: {
				type: "color",
				uniform: "screen",
				defaultValue: [66 / 255, 195 / 255, 31 / 255, 1]
			},
			weight: {
				type: "number",
				uniform: "screenWeight",
				defaultValue: 1,
				min: 0
			},
			balance: {
				type: "number",
				uniform: "balance",
				defaultValue: 1,
				min: 0,
				max: 1
			},
			clipBlack: {
				type: "number",
				uniform: "clipBlack",
				defaultValue: 0,
				min: 0,
				max: 1
			},
			clipWhite: {
				type: "number",
				uniform: "clipWhite",
				defaultValue: 1,
				min: 0,
				max: 1
			},
			mask: {
				type: "boolean",
				defaultValue: !1,
				uniform: "mask",
				shaderDirty: !0
			}
		},
		title: "Chroma Key",
		description: ""
	})
});